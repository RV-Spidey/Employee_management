{"file_contents":{"server.js":{"content":"const express = require('express');\nconst path = require('path');\nrequire('dotenv').config();\nconst { Pool } = require('pg');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// PostgreSQL connection\nif (!process.env.DATABASE_URL) {\n    console.error('ERROR: DATABASE_URL environment variable is not set');\n    console.error('Please set DATABASE_URL in your .env file or environment variables');\n    process.exit(1);\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\nasync function ensureDatabase() {\n    await pool.query(`\n        CREATE TABLE IF NOT EXISTS employees (\n            id TEXT PRIMARY KEY,\n            firstName TEXT NOT NULL,\n            lastName TEXT NOT NULL,\n            email TEXT NOT NULL,\n            department TEXT NOT NULL,\n            salary INTEGER NOT NULL\n        );\n    `);\n    // Create unique index on lower(email) to prevent duplicates (case-insensitive)\n    await pool.query(`\n        DO $$\n        BEGIN\n            IF NOT EXISTS (\n                SELECT 1 FROM pg_indexes WHERE schemaname = 'public' AND indexname = 'employees_email_lower_unique'\n            ) THEN\n                CREATE UNIQUE INDEX employees_email_lower_unique ON employees (LOWER(email));\n            END IF;\n        END $$;\n    `);\n}\n\napp.use(express.json());\napp.use(express.static(path.join(__dirname, 'public')));\n\nfunction generateId() {\n    return Math.random().toString(36).slice(2, 10);\n}\n\n// API Routes\napp.get('/api/employees', async (req, res) => {\n    try {\n        const { rows } = await pool.query(\n            'SELECT id, firstname AS \"firstName\", lastname AS \"lastName\", email, department, salary FROM employees ORDER BY lastname, firstname'\n        );\n        res.json(rows);\n    } catch (err) {\n        res.status(500).json({ message: 'Failed to fetch employees' });\n    }\n});\n\napp.post('/api/employees', async (req, res) => {\n    const { firstName, lastName, email, department, salary } = req.body;\n    if (!firstName || !lastName || !email || !department || typeof salary !== 'number') {\n        return res.status(400).json({ message: 'Invalid employee data' });\n    }\n    try {\n        const id = generateId();\n        const { rows } = await pool.query(\n            'INSERT INTO employees (id, firstname, lastname, email, department, salary) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, firstname AS \"firstName\", lastname AS \"lastName\", email, department, salary',\n            [id, firstName, lastName, email, department, salary]\n        );\n        res.status(201).json(rows[0]);\n    } catch (err) {\n        if (err && err.code === '23505') { // unique_violation\n            return res.status(409).json({ message: 'An employee with this email already exists.' });\n        }\n        res.status(500).json({ message: 'Failed to add employee' });\n    }\n});\n\napp.put('/api/employees/:id', async (req, res) => {\n    const { id } = req.params;\n    const { firstName, lastName, email, department, salary } = req.body;\n    if (!firstName || !lastName || !email || !department || typeof salary !== 'number') {\n        return res.status(400).json({ message: 'Invalid employee data' });\n    }\n    try {\n        const { rows } = await pool.query(\n            'UPDATE employees SET firstname=$1, lastname=$2, email=$3, department=$4, salary=$5 WHERE id=$6 RETURNING id, firstname AS \"firstName\", lastname AS \"lastName\", email, department, salary',\n            [firstName, lastName, email, department, salary, id]\n        );\n        if (rows.length === 0) return res.status(404).json({ message: 'Employee not found' });\n        res.json(rows[0]);\n    } catch (err) {\n        if (err && err.code === '23505') { // unique_violation\n            return res.status(409).json({ message: 'An employee with this email already exists.' });\n        }\n        res.status(500).json({ message: 'Failed to update employee' });\n    }\n});\n\napp.delete('/api/employees/:id', async (req, res) => {\n    const { id } = req.params;\n    try {\n        const { rowCount } = await pool.query('DELETE FROM employees WHERE id=$1', [id]);\n        if (rowCount === 0) return res.status(404).json({ message: 'Employee not found' });\n        res.status(204).end();\n    } catch (err) {\n        res.status(500).json({ message: 'Failed to delete employee' });\n    }\n});\n\n// Fallback to index.html for SPA-like behavior\napp.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.listen(PORT, '0.0.0.0', async () => {\n    try {\n        await ensureDatabase();\n        console.log(`Server is running on http://0.0.0.0:${PORT}`);\n    } catch (err) {\n        console.error('Failed to initialize database', err);\n        process.exit(1);\n    }\n});\n\n\n","size_bytes":4705},"public/app.js":{"content":"// Employee Management System - Vanilla JavaScript\n\nlet employees = [];\nlet filteredEmployees = [];\nlet currentPage = 1;\nlet rowsPerPage = 10;\nlet sortField = 'name';\nlet sortDirection = 'asc';\n\n// DOM Elements\nconst employeeForm = document.getElementById('employee-form');\nconst editEmployeeForm = document.getElementById('edit-employee-form');\nconst tableBody = document.getElementById('employees-table-body');\nconst searchInput = document.getElementById('search-input');\nconst filterDepartment = document.getElementById('filter-department');\nconst rowsPerPageSelect = document.getElementById('rows-per-page');\nconst prevPageBtn = document.getElementById('prev-page');\nconst nextPageBtn = document.getElementById('next-page');\nconst exportCsvBtn = document.getElementById('export-csv');\nconst exportExcelBtn = document.getElementById('export-excel');\nconst editModal = document.getElementById('edit-modal');\nconst closeModalBtn = document.getElementById('close-modal');\nconst totalResultsEl = document.getElementById('total-results');\nconst pageInfoEl = document.getElementById('page-info');\n\n// Initialize\ndocument.addEventListener('DOMContentLoaded', () => {\n    loadEmployees();\n    setupEventListeners();\n});\n\n// Event Listeners\nfunction setupEventListeners() {\n    employeeForm.addEventListener('submit', handleAddEmployee);\n    editEmployeeForm.addEventListener('submit', handleEditEmployee);\n    searchInput.addEventListener('input', handleSearch);\n    filterDepartment.addEventListener('change', handleFilter);\n    rowsPerPageSelect.addEventListener('change', handleRowsPerPageChange);\n    prevPageBtn.addEventListener('click', () => changePage(currentPage - 1));\n    nextPageBtn.addEventListener('click', () => changePage(currentPage + 1));\n    exportCsvBtn.addEventListener('click', exportToCSV);\n    exportExcelBtn.addEventListener('click', exportToExcel);\n    closeModalBtn.addEventListener('click', closeModal);\n    editModal.addEventListener('click', (e) => {\n        if (e.target === editModal) closeModal();\n    });\n\n    // Table sorting\n    document.querySelectorAll('.sortable').forEach(header => {\n        header.addEventListener('click', () => {\n            const field = header.dataset.sort;\n            handleSort(field);\n        });\n    });\n}\n\n// API Calls\nasync function loadEmployees() {\n    try {\n        const response = await fetch('/api/employees');\n        if (!response.ok) throw new Error('Failed to fetch employees');\n        employees = await response.json();\n        applyFilters();\n    } catch (error) {\n        showToast('Error', 'Failed to load employees', 'destructive');\n        console.error(error);\n    }\n}\n\nasync function addEmployee(employeeData) {\n    try {\n        const response = await fetch('/api/employees', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(employeeData)\n        });\n        \n        if (!response.ok) {\n            const errText = await response.text();\n            try {\n                const errJson = JSON.parse(errText);\n                throw new Error(errJson.message || 'Failed to add employee');\n            } catch (_) {\n                throw new Error('Failed to add employee');\n            }\n        }\n        \n        const newEmployee = await response.json();\n        employees.push(newEmployee);\n        applyFilters();\n        showToast('Employee Added', `${employeeData.firstName} ${employeeData.lastName} has been added successfully.`);\n    } catch (error) {\n        showToast('Error', error.message || 'Failed to add employee', 'destructive');\n        console.error(error);\n    }\n}\n\nasync function updateEmployee(id, employeeData) {\n    try {\n        const response = await fetch(`/api/employees/${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(employeeData)\n        });\n        \n        if (!response.ok) {\n            const errText = await response.text();\n            try {\n                const errJson = JSON.parse(errText);\n                throw new Error(errJson.message || 'Failed to update employee');\n            } catch (_) {\n                throw new Error('Failed to update employee');\n            }\n        }\n        \n        const updatedEmployee = await response.json();\n        const index = employees.findIndex(emp => emp.id === id);\n        if (index !== -1) {\n            employees[index] = updatedEmployee;\n            applyFilters();\n            showToast('Employee Updated', `${employeeData.firstName} ${employeeData.lastName} has been updated successfully.`);\n        }\n    } catch (error) {\n        showToast('Error', error.message || 'Failed to update employee', 'destructive');\n        console.error(error);\n    }\n}\n\nasync function deleteEmployee(id) {\n    const employee = employees.find(emp => emp.id === id);\n    if (!employee) return;\n\n    if (!confirm(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}?`)) {\n        return;\n    }\n\n    try {\n        const response = await fetch(`/api/employees/${id}`, {\n            method: 'DELETE'\n        });\n        \n        if (!response.ok) throw new Error('Failed to delete employee');\n        \n        employees = employees.filter(emp => emp.id !== id);\n        applyFilters();\n        showToast('Employee Deleted', `${employee.firstName} ${employee.lastName} has been removed.`, 'destructive');\n    } catch (error) {\n        showToast('Error', 'Failed to delete employee', 'destructive');\n        console.error(error);\n    }\n}\n\n// Form Handlers\nfunction handleAddEmployee(e) {\n    e.preventDefault();\n    \n    const formData = {\n        firstName: document.getElementById('firstName').value,\n        lastName: document.getElementById('lastName').value,\n        email: document.getElementById('email').value,\n        department: document.getElementById('department').value,\n        salary: parseInt(document.getElementById('salary').value)\n    };\n\n    // Client-side duplicate email check (case-insensitive)\n    const emailExists = employees.some(emp => emp.email.toLowerCase() === formData.email.toLowerCase());\n    if (emailExists) {\n        showToast('Duplicate Email', 'An employee with this email already exists.', 'destructive');\n        return;\n    }\n\n    addEmployee(formData);\n    employeeForm.reset();\n}\n\nfunction handleEditEmployee(e) {\n    e.preventDefault();\n    \n    const id = document.getElementById('edit-employee-id').value;\n    const formData = {\n        firstName: document.getElementById('edit-firstName').value,\n        lastName: document.getElementById('edit-lastName').value,\n        email: document.getElementById('edit-email').value,\n        department: document.getElementById('edit-department').value,\n        salary: parseInt(document.getElementById('edit-salary').value)\n    };\n\n    updateEmployee(id, formData);\n    closeModal();\n}\n\nfunction openEditModal(employee) {\n    document.getElementById('edit-employee-id').value = employee.id;\n    document.getElementById('edit-firstName').value = employee.firstName;\n    document.getElementById('edit-lastName').value = employee.lastName;\n    document.getElementById('edit-email').value = employee.email;\n    document.getElementById('edit-department').value = employee.department;\n    document.getElementById('edit-salary').value = employee.salary;\n    editModal.classList.add('active');\n}\n\nfunction closeModal() {\n    editModal.classList.remove('active');\n    editEmployeeForm.reset();\n}\n\n// Search & Filter\nfunction handleSearch() {\n    currentPage = 1;\n    applyFilters();\n}\n\nfunction handleFilter() {\n    currentPage = 1;\n    applyFilters();\n}\n\nfunction applyFilters() {\n    const searchQuery = searchInput.value.toLowerCase();\n    const selectedDept = filterDepartment.value;\n\n    filteredEmployees = employees.filter(emp => {\n        const matchesSearch = !searchQuery || \n            `${emp.firstName} ${emp.lastName}`.toLowerCase().includes(searchQuery) ||\n            emp.email.toLowerCase().includes(searchQuery) ||\n            emp.department.toLowerCase().includes(searchQuery);\n\n        const matchesDept = selectedDept === 'all' || emp.department === selectedDept;\n\n        return matchesSearch && matchesDept;\n    });\n\n    sortEmployees();\n    renderTable();\n    updatePagination();\n}\n\n// Sorting\nfunction handleSort(field) {\n    if (sortField === field) {\n        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';\n    } else {\n        sortField = field;\n        sortDirection = 'asc';\n    }\n\n    updateSortIcons();\n    sortEmployees();\n    renderTable();\n}\n\nfunction sortEmployees() {\n    filteredEmployees.sort((a, b) => {\n        let aValue, bValue;\n\n        if (sortField === 'name') {\n            aValue = `${a.firstName} ${a.lastName}`.toLowerCase();\n            bValue = `${b.firstName} ${b.lastName}`.toLowerCase();\n        } else if (sortField === 'salary') {\n            aValue = a.salary;\n            bValue = b.salary;\n        } else {\n            aValue = a[sortField].toLowerCase();\n            bValue = b[sortField].toLowerCase();\n        }\n\n        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n        return 0;\n    });\n}\n\nfunction updateSortIcons() {\n    document.querySelectorAll('.sort-icon').forEach(icon => {\n        icon.className = 'sort-icon';\n    });\n\n    const activeHeader = document.querySelector(`[data-sort=\"${sortField}\"] .sort-icon`);\n    if (activeHeader) {\n        activeHeader.classList.add(sortDirection);\n    }\n}\n\n// Pagination\nfunction handleRowsPerPageChange() {\n    rowsPerPage = parseInt(rowsPerPageSelect.value);\n    currentPage = 1;\n    renderTable();\n    updatePagination();\n}\n\nfunction changePage(page) {\n    const totalPages = Math.ceil(filteredEmployees.length / rowsPerPage);\n    if (page < 1 || page > totalPages) return;\n    \n    currentPage = page;\n    renderTable();\n    updatePagination();\n}\n\nfunction updatePagination() {\n    const totalPages = Math.max(1, Math.ceil(filteredEmployees.length / rowsPerPage));\n    \n    totalResultsEl.textContent = `${filteredEmployees.length} results`;\n    pageInfoEl.textContent = `Page ${currentPage} of ${totalPages}`;\n    \n    prevPageBtn.disabled = currentPage === 1;\n    nextPageBtn.disabled = currentPage === totalPages;\n}\n\n// Render Table\nfunction renderTable() {\n    const start = (currentPage - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n    const paginatedEmployees = filteredEmployees.slice(start, end);\n\n    if (paginatedEmployees.length === 0) {\n        tableBody.innerHTML = `\n            <tr class=\"no-data\">\n                <td colspan=\"5\">No employees found</td>\n            </tr>\n        `;\n        return;\n    }\n\n    tableBody.innerHTML = paginatedEmployees.map(emp => `\n        <tr data-testid=\"row-employee-${emp.id}\">\n            <td data-testid=\"text-name-${emp.id}\">${emp.firstName} ${emp.lastName}</td>\n            <td data-testid=\"text-email-${emp.id}\">${emp.email}</td>\n            <td data-testid=\"text-department-${emp.id}\">${emp.department}</td>\n            <td data-testid=\"text-salary-${emp.id}\">₹${emp.salary.toLocaleString('en-IN')}</td>\n            <td class=\"actions-column\">\n                <div class=\"action-buttons\">\n                    <button class=\"btn btn-secondary btn-sm\" data-testid=\"button-edit-${emp.id}\" onclick=\"openEditModal(${JSON.stringify(emp).replace(/\"/g, '&quot;')})\">\n                        <svg class=\"icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                            <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                        </svg>\n                        Edit\n                    </button>\n                    <button class=\"btn btn-destructive btn-sm\" data-testid=\"button-delete-${emp.id}\" onclick=\"deleteEmployee('${emp.id}')\">\n                        <svg class=\"icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <polyline points=\"3 6 5 6 21 6\"></polyline>\n                            <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n                        </svg>\n                        Delete\n                    </button>\n                </div>\n            </td>\n        </tr>\n    `).join('');\n}\n\n// Export Functions\nfunction exportToCSV() {\n    const headers = ['Name', 'Email', 'Department', 'Salary (₹)'];\n    const rows = filteredEmployees.map(emp => [\n        `${emp.firstName} ${emp.lastName}`,\n        emp.email,\n        emp.department,\n        emp.salary.toString()\n    ]);\n\n    const csvContent = [\n        headers.join(','),\n        ...rows.map(row => row.map(cell => `\"${cell}\"`).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'employees.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    showToast('CSV Exported', 'Employee data has been exported to CSV.');\n}\n\nasync function exportToExcel() {\n    try {\n        const workbook = new ExcelJS.Workbook();\n        const worksheet = workbook.addWorksheet('Employees');\n\n        // Define columns with headers, keys, and widths\n        worksheet.columns = [\n            { header: 'Name', key: 'name', width: 28 },\n            { header: 'Email', key: 'email', width: 32 },\n            { header: 'Department', key: 'department', width: 18 },\n            { header: 'Salary (₹)', key: 'salary', width: 14 }\n        ];\n\n        // Bold header row\n        const headerRow = worksheet.getRow(1);\n        headerRow.font = { bold: true };\n\n        // Add data rows\n        filteredEmployees.forEach(emp => {\n            worksheet.addRow({\n                name: `${emp.firstName} ${emp.lastName}`,\n                email: emp.email,\n                department: emp.department,\n                salary: emp.salary\n            });\n        });\n\n        // Format salary as currency\n        const salaryCol = worksheet.getColumn('salary');\n        salaryCol.numFmt = '[$₹-4009]#,##0';\n\n        // Generate and trigger download\n        const buffer = await workbook.xlsx.writeBuffer();\n        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'employees.xlsx';\n        a.click();\n        URL.revokeObjectURL(url);\n\n        showToast('Excel Exported', 'Employee data has been exported to Excel.');\n    } catch (err) {\n        console.error(err);\n        showToast('Error', 'Failed to export to Excel', 'destructive');\n    }\n}\n\n// Toast Notifications\nfunction showToast(title, description, variant = '') {\n    const toast = document.createElement('div');\n    toast.className = `toast ${variant}`;\n    toast.innerHTML = `\n        <div class=\"toast-title\">${title}</div>\n        <div class=\"toast-description\">${description}</div>\n    `;\n\n    const container = document.getElementById('toast-container');\n    container.appendChild(toast);\n\n    setTimeout(() => {\n        toast.style.animation = 'slideIn 0.2s ease reverse';\n        setTimeout(() => toast.remove(), 200);\n    }, 3000);\n}\n","size_bytes":15502},"public/styles.css":{"content":"/* CSS Reset & Variables */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    /* Deep black, high-contrast dark theme */\n    --background: hsl(220 10% 6%);          /* near-black */\n    --foreground: hsl(220 15% 96%);\n    --card: hsl(220 10% 9%);\n    --card-elevated: hsl(220 10% 11%);\n    --card-border: hsl(220 8% 16%);\n    --border: hsl(220 8% 18%);\n    --secondary: hsl(220 9% 13%);\n    --secondary-hover: hsl(220 9% 16%);\n    --muted-foreground: hsl(220 10% 70%);\n    --primary: hsl(210 100% 58%);\n    --primary-hover: hsl(210 100% 52%);\n    --destructive: hsl(0 78% 55%);\n    --destructive-hover: hsl(0 78% 49%);\n    --focus: hsl(210 100% 58% / 0.4);\n    --shadow-color: 220 60% 4%;\n    --font-sans: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;\n}\n\n/* Optional: ultra-black variant toggled by adding .pure-black on html/body */\n.pure-black {\n    --background: hsl(220 10% 3%);\n    --card: hsl(220 10% 5%);\n    --card-elevated: hsl(220 10% 7%);\n    --card-border: hsl(220 8% 12%);\n    --border: hsl(220 8% 14%);\n    --secondary: hsl(220 9% 8%);\n    --secondary-hover: hsl(220 9% 12%);\n}\n\nbody {\n    font-family: var(--font-sans);\n    background:\n        radial-gradient(1200px 600px at 10% -10%, hsl(210 100% 60% / 0.06), transparent 60%),\n        radial-gradient(1000px 500px at 110% 10%, hsl(280 100% 60% / 0.05), transparent 60%),\n        linear-gradient(to bottom, var(--background), var(--card));\n    color: var(--foreground);\n    min-height: 100vh;\n    line-height: 1.5;\n}\n\n/* Layout */\n.app-container {\n    min-height: 100vh;\n}\n\n.content-wrapper {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 2rem 1.5rem;\n}\n\n.page-title {\n    font-size: 1.875rem;\n    font-weight: 700;\n    margin-bottom: 2rem;\n}\n\n/* Form Card */\n.form-card {\n    background: linear-gradient(180deg, var(--card-elevated), var(--card));\n    border: 1px solid var(--card-border);\n    border-radius: 0.75rem;\n    padding: 1.5rem;\n    margin-bottom: 2rem;\n    box-shadow: 0 20px 40px -10px hsl(var(--shadow-color) / 0.55);\n}\n\n.employee-form {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 1rem;\n}\n\n.form-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.form-submit {\n    align-items: flex-end;\n}\n\n.form-label {\n    font-size: 0.875rem;\n    color: var(--muted-foreground);\n    font-weight: 500;\n}\n\n.form-input,\n.form-select {\n    height: 3rem;\n    padding: 0 1rem;\n    background: var(--secondary);\n    border: 1px solid var(--border);\n    border-radius: 0.375rem;\n    color: var(--foreground);\n    font-size: 0.9375rem;\n    font-family: inherit;\n    transition: border-color 0.15s ease;\n}\n\n.form-input:focus,\n.form-select:focus {\n    outline: none;\n    border-color: var(--primary);\n    box-shadow: 0 0 0 4px var(--focus);\n}\n\n.form-input::placeholder {\n    color: hsl(220, 15%, 60%);\n}\n\n/* Buttons */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    padding: 0 1.5rem;\n    height: 2.5rem;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    font-family: inherit;\n    cursor: pointer;\n    transition: all 0.15s ease;\n    border: 1px solid transparent;\n}\n\n.btn-primary {\n    background: var(--primary);\n    color: white;\n    border-color: var(--primary);\n}\n\n.btn-primary:hover {\n    background: var(--primary-hover);\n}\n\n.btn:focus-visible {\n    outline: none;\n    box-shadow: 0 0 0 4px var(--focus);\n}\n\n.btn-outline {\n    background: transparent;\n    color: var(--foreground);\n    border-color: var(--border);\n}\n\n.btn-outline:hover {\n    background: rgba(255, 255, 255, 0.04);\n}\n\n.btn-secondary {\n    background: var(--secondary);\n    color: var(--foreground);\n    border-color: var(--border);\n}\n\n.btn-secondary:hover {\n    background: hsl(220, 35%, 24%);\n}\n\n.btn-destructive {\n    background: var(--destructive);\n    color: white;\n    border-color: var(--destructive);\n}\n\n.btn-destructive:hover {\n    background: var(--destructive-hover);\n}\n\n.btn-sm {\n    height: 2rem;\n    padding: 0 0.875rem;\n    font-size: 0.8125rem;\n}\n\n.btn-full {\n    width: 100%;\n}\n\n.btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n.icon {\n    width: 1rem;\n    height: 1rem;\n}\n\n.icon-sm {\n    width: 0.875rem;\n    height: 0.875rem;\n}\n\n/* Employees Section */\n.employees-section {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\n.section-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 1rem;\n}\n\n.section-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n}\n\n.export-buttons {\n    display: flex;\n    gap: 0.75rem;\n}\n\n/* Search & Filter */\n.search-filter-bar {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.filter-select {\n    width: 200px;\n}\n\n.search-wrapper {\n    position: relative;\n    flex: 1;\n    max-width: 28rem;\n}\n\n.search-icon {\n    position: absolute;\n    left: 0.75rem;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 1rem;\n    height: 1rem;\n    color: var(--muted-foreground);\n    pointer-events: none;\n}\n\n.search-input {\n    padding-left: 2.5rem;\n}\n\n/* Table */\n.table-container {\n    border: 1px solid var(--border);\n    border-radius: 0.5rem;\n    overflow: hidden;\n}\n\n.employees-table {\n    width: 100%;\n    border-collapse: collapse;\n    background: var(--card);\n}\n\n.employees-table th {\n    background: linear-gradient(180deg, hsl(220 12% 14%), hsl(220 12% 12%));\n    padding: 1rem;\n    text-align: left;\n    font-weight: 600;\n    font-size: 0.875rem;\n    color: var(--foreground);\n}\n\n.employees-table th.sortable {\n    cursor: pointer;\n    user-select: none;\n}\n\n.employees-table th.sortable:hover {\n    background: hsl(220 12% 16%);\n}\n\n.sort-icon {\n    display: inline-block;\n    margin-left: 0.25rem;\n    width: 1rem;\n    height: 1rem;\n    vertical-align: middle;\n}\n\n.sort-icon::before {\n    content: '';\n}\n\n.sort-icon.asc::before {\n    content: '▲';\n    font-size: 0.75rem;\n}\n\n.sort-icon.desc::before {\n    content: '▼';\n    font-size: 0.75rem;\n}\n\n.employees-table td {\n    padding: 1rem;\n    border-top: 1px solid var(--border);\n    font-size: 0.9375rem;\n}\n\n.employees-table tbody tr {\n    transition: background 0.2s ease;\n}\n\n.employees-table tbody tr:hover {\n    background: hsl(0 0% 100% / 0.04);\n}\n\n.employees-table tbody tr.no-data {\n    text-align: center;\n}\n\n.employees-table tbody tr.no-data td {\n    color: var(--muted-foreground);\n    padding: 2rem;\n}\n\n.actions-column {\n    text-align: right;\n}\n\n.action-buttons {\n    display: flex;\n    gap: 0.5rem;\n    justify-content: flex-end;\n}\n\n/* Pagination */\n.pagination-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1rem;\n    padding: 0.5rem;\n    flex-wrap: wrap;\n}\n\n.pagination-left,\n.pagination-right {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.pagination-rows {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.pagination-text {\n    font-size: 0.875rem;\n    color: var(--muted-foreground);\n}\n\n.rows-select {\n    width: 80px;\n    height: 2rem;\n}\n\n.pagination-buttons {\n    display: flex;\n    gap: 0.25rem;\n}\n\n/* Modal */\n.modal {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 1000;\n    align-items: center;\n    justify-content: center;\n    padding: 1rem;\n}\n\n.modal.active {\n    display: flex;\n}\n\n.modal-content {\n    background: linear-gradient(180deg, var(--card-elevated), var(--card));\n    border: 1px solid var(--card-border);\n    border-radius: 0.5rem;\n    max-width: 640px;\n    width: 100%;\n    max-height: 90vh;\n    overflow-y: auto;\n    box-shadow: 0 30px 50px -12px hsl(var(--shadow-color) / 0.6);\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.modal-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n}\n\n.modal-close {\n    background: none;\n    border: none;\n    color: var(--foreground);\n    font-size: 1.5rem;\n    cursor: pointer;\n    width: 2rem;\n    height: 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    transition: background 0.15s ease;\n}\n\n.modal-close:hover {\n    background: rgba(255, 255, 255, 0.04);\n}\n\n.modal-body {\n    padding: 1.5rem;\n}\n\n/* Toast */\n.toast-container {\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    z-index: 2000;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.toast {\n    background: linear-gradient(180deg, var(--card-elevated), var(--card));\n    border: 1px solid var(--card-border);\n    border-radius: 0.5rem;\n    padding: 1rem 1.25rem;\n    min-width: 300px;\n    box-shadow: 0 10px 20px -4px hsl(var(--shadow-color) / 0.45);\n    animation: slideIn 0.2s ease;\n}\n\n/* Scrollbar styling for dark UI */\n*::-webkit-scrollbar {\n    height: 10px;\n    width: 10px;\n}\n*::-webkit-scrollbar-track {\n    background: var(--background);\n}\n*::-webkit-scrollbar-thumb {\n    background: hsl(220 8% 22%);\n    border-radius: 10px;\n    border: 2px solid var(--background);\n}\n*::-webkit-scrollbar-thumb:hover {\n    background: hsl(220 8% 26%);\n}\n\n.toast-title {\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n}\n\n.toast-description {\n    font-size: 0.875rem;\n    color: var(--muted-foreground);\n}\n\n.toast.destructive {\n    border-color: var(--destructive);\n}\n\n.toast.destructive .toast-title {\n    color: var(--destructive);\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Authentication Pages */\n.auth-container {\n    max-width: 420px;\n    margin: 0 auto;\n    padding-top: 2rem;\n    text-align: center;\n}\n\n.auth-subtitle {\n    font-size: 1rem;\n    font-weight: 500;\n    color: var(--muted-foreground);\n    margin-bottom: 2rem;\n}\n\n.auth-form {\n    display: flex;\n    flex-direction: column;\n    gap: 1.25rem;\n    text-align: left;\n}\n\n.auth-footer {\n    margin-top: 1rem;\n    text-align: center;\n}\n\n.auth-text {\n    font-size: 0.875rem;\n    color: var(--muted-foreground);\n}\n\n.auth-link {\n    color: var(--primary);\n    text-decoration: none;\n    font-weight: 500;\n    transition: color 0.15s ease;\n}\n\n.auth-link:hover {\n    color: var(--primary-hover);\n    text-decoration: underline;\n}\n\n.btn-full {\n    width: 100%;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n    .employee-form {\n        grid-template-columns: 1fr;\n    }\n\n    .search-filter-bar {\n        flex-direction: column;\n        align-items: stretch;\n    }\n\n    .filter-select,\n    .search-wrapper {\n        width: 100%;\n        max-width: none;\n    }\n\n    .section-header {\n        flex-direction: column;\n        align-items: stretch;\n    }\n\n    .export-buttons {\n        justify-content: stretch;\n    }\n\n    .export-buttons button {\n        flex: 1;\n    }\n\n    .pagination-container {\n        flex-direction: column;\n        align-items: stretch;\n    }\n\n    .pagination-left,\n    .pagination-right {\n        justify-content: space-between;\n    }\n}\n","size_bytes":11170},"RAILWAY_DEPLOYMENT.md":{"content":"# Railway Deployment Guide\n\nThis guide will help you deploy your Employee Management System to Railway.app with a PostgreSQL database.\n\n## Prerequisites\n- A Railway.app account (sign up at https://railway.app)\n- Git installed on your machine\n- Your code pushed to a GitHub repository\n\n## Step 1: Create a New Project on Railway\n\n1. Go to https://railway.app and log in\n2. Click \"New Project\"\n3. Select \"Deploy from GitHub repo\"\n4. Connect your GitHub account if you haven't already\n5. Select the repository containing your Employee Management System\n\n## Step 2: Add PostgreSQL Database\n\n1. In your Railway project, click \"New\" → \"Database\" → \"Add PostgreSQL\"\n2. Railway will automatically create a PostgreSQL database\n3. The database will be automatically connected to your application\n\n## Step 3: Configure Environment Variables\n\nRailway automatically sets the `DATABASE_URL` environment variable when you add PostgreSQL. You can verify this:\n\n1. Click on your PostgreSQL service\n2. Go to the \"Variables\" tab\n3. You should see `DATABASE_URL` is already set\n\nThe app will automatically use the PORT variable that Railway provides.\n\n## Step 4: Deploy Your Application\n\n1. Railway will automatically detect your Node.js application\n2. It will run `npm install` to install dependencies\n3. It will use `npm start` to run your application (as defined in package.json)\n\nYour application should now be deploying!\n\n## Step 5: Access Your Application\n\n1. Once deployment is complete, Railway will provide a URL\n2. Click on your application service\n3. Go to \"Settings\" → \"Networking\" \n4. Click \"Generate Domain\" to get a public URL\n5. Your Employee Management System is now live!\n\n## Environment Variables\n\nYour application requires the following environment variable:\n\n- `DATABASE_URL` - PostgreSQL connection string (automatically set by Railway when you add the database)\n- `PORT` - Application port (automatically set by Railway)\n\n## Deployment Commands\n\nRailway uses these commands from your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  }\n}\n```\n\n## Troubleshooting\n\n### Database Connection Issues\n- Ensure the PostgreSQL service is running in Railway\n- Check that DATABASE_URL is set in your environment variables\n- Review the deployment logs for connection errors\n\n### Application Not Starting\n- Check the logs in Railway dashboard\n- Verify that all dependencies are listed in package.json\n- Ensure Node.js version is compatible (Railway uses latest LTS by default)\n\n### Port Issues\n- Railway automatically assigns a PORT environment variable\n- Your app is already configured to use `process.env.PORT || 5000`\n\n## Cost Information\n\nRailway offers:\n- $5 free credits per month for new users\n- Pay-as-you-go pricing after free credits\n- PostgreSQL database included in usage\n\n## Additional Resources\n\n- Railway Documentation: https://docs.railway.app\n- Railway Discord Community: https://discord.gg/railway\n- PostgreSQL on Railway: https://docs.railway.app/databases/postgresql\n","size_bytes":3007},"readme.md":{"content":"### Employee Management System\n\nComprehensive employee management app with a vanilla JS front‑end and an Express + PostgreSQL backend. Features include add/edit/delete, instant search and filters, client-side sorting and pagination, and one‑click CSV/Excel exports.\n\n---\n\n## Stack Overview\n\n- **Runtime**: Node.js 18+\n- **Web framework**: Express 4\n- **Database**: PostgreSQL (via `pg` pool)\n- **Env management**: `dotenv`\n- **Frontend**: Vanilla JavaScript, HTML, CSS (no frameworks)\n- **Exports**: Excel via `ExcelJS` (browser CDN), CSV via native Blob API\n\nDirectory layout:\n\n```text\npublic/          # static assets (HTML, CSS, JS)\n  index.html     # UI + ExcelJS CDN include\n  styles.css     # styling\n  app.js         # UI logic, API calls, sorting, filters, pagination, export\nserver.js        # Express server + API routes + DB init\npackage.json     # scripts and dependencies\n```\n\n---\n\n## Database\n\n- Uses a single `employees` table, created automatically on server start.\n- Enforces unique emails case‑insensitively via an index on `LOWER(email)`.\n\nSchema created by the server:\n\n```sql\nCREATE TABLE IF NOT EXISTS employees (\n  id TEXT PRIMARY KEY,\n  firstName TEXT NOT NULL,\n  lastName TEXT NOT NULL,\n  email TEXT NOT NULL,\n  department TEXT NOT NULL,\n  salary INTEGER NOT NULL\n);\n\n-- Unique index (case-insensitive) on email\nCREATE UNIQUE INDEX employees_email_lower_unique ON employees (LOWER(email));\n```\n\nConnection is provided by the `DATABASE_URL` environment variable (standard Postgres connection string).\n\nExample values:\n\n```bash\n# .env\nDATABASE_URL=postgres://user:password@host:5432/dbname\nPORT=5000\n```\n\n---\n\n## Server\n\n- Serves the SPA from `public/` and exposes REST endpoints under `/api/employees`.\n- On boot, it ensures the table and uniqueness index exist.\n- Listens on `PORT` or defaults to `5000`.\n\nEndpoints:\n\n```http\nGET    /api/employees\nPOST   /api/employees\nPUT    /api/employees/:id\nDELETE /api/employees/:id\n```\n\nResponse/Request model:\n\n```json\n{\n  \"id\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"department\": \"string\",\n  \"salary\": 50000\n}\n```\n\nNotes:\n\n- `GET` returns employees ordered by lastName, then firstName.\n- `POST` and `PUT` validate required fields and salary type; duplicate emails return `409`.\n\nExample cURL:\n\n```bash\ncurl http://localhost:5000/api/employees\n\ncurl -X POST http://localhost:5000/api/employees \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"firstName\":\"Jane\",\"lastName\":\"Doe\",\"email\":\"jane@company.com\",\"department\":\"CSE\",\"salary\":80000}'\n\ncurl -X PUT http://localhost:5000/api/employees/<id> \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"firstName\":\"Jane\",\"lastName\":\"Doe\",\"email\":\"jane@company.com\",\"department\":\"EEE\",\"salary\":90000}'\n\ncurl -X DELETE http://localhost:5000/api/employees/<id>\n```\n\n---\n\n## Frontend Features\n\n- **Add/Edit/Delete**: Form submits to the API; edit uses a modal; delete confirms.\n- **Search**: Instant, case‑insensitive search across name, email, department.\n- **Filter**: Department dropdown with an \"All departments\" option.\n- **Sorting**: Click table headers to sort by Name, Email, Department, or Salary; toggles asc/desc.\n- **Pagination**: Client‑side pagination with selectable rows per page (5/10/25/50).\n- **CSV Export**: Generates a CSV entirely on the client using `Blob` and triggers a download.\n- **Excel Export**: Uses `ExcelJS` (loaded via CDN) to generate `.xlsx` with headers, widths, and currency formatting for salary.\n- **Toasts**: Lightweight notifications for success/error states.\n\nSorting specifics (client‑side):\n\n- Name sort uses a concatenation of `firstName lastName` (case‑insensitive).\n- Text fields compare using lowercase strings.\n- Salary is compared numerically.\n\nPagination specifics (client‑side):\n\n- Computed from the filtered list; page bounds protected.\n- Displays total results and current page info; disables prev/next at bounds.\n\n---\n\n## CSV Export Details\n\n- Columns: Name, Email, Department, Salary (₹).\n- Implementation builds rows from the current filtered dataset and downloads `employees.csv`.\n- Commas/quotes in fields are handled by wrapping fields in quotes.\n\n---\n\n## Excel Export Details\n\n- Uses `ExcelJS` via CDN in `index.html`:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/exceljs@4.4.0/dist/exceljs.min.js\"></script>\n```\n\n- Workbook/worksheet are created in the browser; headers are bold; salary column uses Indian Rupee currency format `[$₹-4009]#,##0`.\n- Downloads `employees.xlsx` without any server roundtrip.\n\n---\n\n## Getting Started (Local)\n\n1) Install dependencies\n\n```bash\nnpm install\n```\n\n2) Configure environment\n\n```bash\ncp .env.example .env\n# edit .env to set DATABASE_URL\n```\n\n3) Run the server (default http://localhost:5000)\n\n```bash\nnpm run dev\n# or\nnpm start\n```\n\nOpen `http://localhost:5000` in your browser.\n\n---\n\n## Deployment\n\n- Any platform with Node + Postgres support works (e.g., Railway, Render, Fly.io, Heroku‑like).\n- Ensure `DATABASE_URL` is set in the platform environment.\n- Bind to `0.0.0.0` and the platform-provided port (already handled by `server.js`).\n\n---\n\n## Validation and Error Handling\n\n- Backend validates required fields and returns `400` for invalid payloads.\n- Unique email conflicts return `409` with a descriptive message.\n- Generic server/database errors return `500`.\n- Frontend surfaces errors via toast notifications.\n\n---\n\n## FAQs / Troubleshooting\n\n- \"Server exits on start with DATABASE_URL error\": set `DATABASE_URL` in `.env` or platform env.\n- \"Duplicate email\" on add/update: the database enforces a case‑insensitive uniqueness index.\n- \"Excel export fails\": verify network access to the ExcelJS CDN and that `filteredEmployees` has data.\n- \"Nothing shows in the table\": check the Network tab for `/api/employees` errors; verify database connectivity and table exists (it’s auto‑created on boot).\n\n---\n\n## License\n\nMIT\n\n","size_bytes":5915}},"version":1}